/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package filesmanagement;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author Julian Lara
 */
public class jFrame extends javax.swing.JFrame {

    ArrayList<Map> arrayListRegistro;

    /**
     * Creates new form jFrame
     */
    public jFrame() {
        initComponents();
        mostrar();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtNombre = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtCorreo = new javax.swing.JTextField();
        btnGuardar = new javax.swing.JButton();
        btnModificar = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtFile = new javax.swing.JList<>();
        btnLimpiar = new javax.swing.JButton();
        btnConsulta = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Apellido");

        jLabel2.setText("Nombre");

        jLabel3.setText("Correo");

        btnGuardar.setText("Guardar");
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });

        btnModificar.setText("Modificar");
        btnModificar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModificarActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        txtFile.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { " " };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        txtFile.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtFileMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(txtFile);

        btnLimpiar.setText("LimpiarSeleccion");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnConsulta.setText("Consulta");
        btnConsulta.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConsultaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel3)
                            .addGap(47, 47, 47)
                            .addComponent(txtCorreo, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(jLabel1)
                            .addGap(39, 39, 39)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtNombre, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE)
                                .addComponent(txtApellido))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnGuardar)
                        .addGap(18, 18, 18)
                        .addComponent(btnModificar)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 50, Short.MAX_VALUE)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(45, 45, 45))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnLimpiar)
                        .addGap(63, 63, 63))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnConsulta)
                        .addGap(84, 84, 84))))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(51, 51, 51)
                    .addComponent(jLabel2)
                    .addContainerGap(483, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addGap(42, 42, 42)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtCorreo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnGuardar)
                            .addComponent(btnModificar)
                            .addComponent(btnEliminar)))
                    .addComponent(jScrollPane2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiar)
                .addGap(2, 2, 2)
                .addComponent(btnConsulta)
                .addContainerGap())
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(40, 40, 40)
                    .addComponent(jLabel2)
                    .addContainerGap(254, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        if (verificaCrear()) {
            String nombre = txtNombre.getText();
            String apellido = txtApellido.getText();
            String correo = txtCorreo.getText();
            String cadena;
            FileWriter fichero = null;  //objeto principal (archivo)
            PrintWriter linea = null;   //objeto de contenido de archivo
            try {
                fichero = new FileWriter("d:/ejemplo.txt", true); //crea el archivo 
                linea = new PrintWriter(fichero); //apunta el PrintWriter al archivo creado
                // Inicia captura de datos del usuario
                cadena = nombre + ";" + apellido + ";" + correo + ";";
                linea.println(cadena); //escribiendo en el archivo

            } catch (IOException e) {
                System.out.print("Error creando archivo");

            } finally {
                try {
                    if (fichero != null) {
                        fichero.close();
                    }
                } catch (IOException e1) {
                    System.out.print("Error cerrando archivo");
                }
            }

            DefaultListModel listModel = (DefaultListModel) txtFile.getModel();
            listModel.removeAllElements();

        }

    }//GEN-LAST:event_btnGuardarActionPerformed

    private void btnModificarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModificarActionPerformed
        if(!txtFile.isSelectionEmpty()){
            String nombre = txtNombre.getText();
        String apellido = txtApellido.getText();
        String correo = txtCorreo.getText();
        Map<String, String> registroMap = null;
        for (int i = 0; i < arrayListRegistro.size(); i++) {
            arrayListRegistro.get(i).containsValue(txtFile.getSelectedValue());
            if (arrayListRegistro.get(i).containsValue(txtFile.getSelectedValue())) {
                registroMap = arrayListRegistro.get(i);
                System.out.println(arrayListRegistro.get(i));
            }
        }
        registroMap.replace("Nombre", nombre);
        registroMap.replace("Apellido", apellido);
        registroMap.replace("Correo", correo);

        String cadena;
        FileWriter fichero = null;  //objeto principal (archivo)
        PrintWriter linea = null;   //objeto de contenido de archivo
        // File deleteFichero = new File("d:/ejemplo.txt");
        //deleteFichero.delete();
        try {

            fichero = new FileWriter("d:/ejemplo.txt", false); //crea el archivo 
            linea = new PrintWriter(fichero); //apunta el PrintWriter al archivo creado
            // Inicia captura de datos del usuario
            for (Map a : arrayListRegistro) {
                String _nombre = a.get("Nombre").toString();
                String _apellido = a.get("Apellido").toString();
                String _correo = a.get("Correo").toString();
                cadena = _nombre + ";" + _apellido + ";" + _correo + ";";
                linea.println(cadena); //escribiendo en el archivo
            }

        } catch (IOException e) {
            System.out.print("Error creando archivo");
            e.printStackTrace();

        } finally {
            try {
                if (fichero != null) {
                    fichero.close();
                }
            } catch (IOException e1) {
                System.out.print("Error cerrando archivo");
            }
        }
        DefaultListModel listModel = (DefaultListModel) txtFile.getModel();
        listModel.removeAllElements();

        } else {
            JOptionPane.showMessageDialog(null, "Debe seleccionar el registro a modificar!");
        }
        
    }//GEN-LAST:event_btnModificarActionPerformed

    private boolean verificaCrear() {

        if (txtNombre.getText().isEmpty() || txtNombre.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "Debe llenar el campo de Nombre");
            txtNombre.requestFocus();
            return false;
        }
        if (txtApellido.getText().isEmpty() || txtApellido.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "Debe llenar el campo de Apellido");
            txtApellido.requestFocus();
            return false;
        }
        if (txtCorreo.getText().isEmpty() || txtCorreo.getText().isBlank()) {
            JOptionPane.showMessageDialog(null, "Debe llenar el campo de Correo");
            txtCorreo.requestFocus();
            return false;
        }
        return true;
    }
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
if(!txtFile.isSelectionEmpty()){
    for (int i = 0; i < arrayListRegistro.size(); i++) {
            arrayListRegistro.get(i).containsValue(txtFile.getSelectedValue());
            if (arrayListRegistro.get(i).containsValue(txtFile.getSelectedValue())) {
                arrayListRegistro.remove(i);
            }
        }
        String cadena = "";
        FileWriter fichero = null;  //objeto principal (archivo)
        PrintWriter linea = null;   //objeto de contenido de archivo
        // File deleteFichero = new File("d:/ejemplo.txt");
        //deleteFichero.delete();
        try {

            fichero = new FileWriter("d:/ejemplo.txt", false); //crea el archivo 
            linea = new PrintWriter(fichero); //apunta el PrintWriter al archivo creado
            // Inicia captura de datos del usuario
            for (Map a : arrayListRegistro) {
                String _nombre = a.get("Nombre").toString();
                String _apellido = a.get("Apellido").toString();
                String _correo = a.get("Correo").toString();
                cadena = _nombre + ";" + _apellido + ";" + _correo + ";";
                linea.println(cadena); //escribiendo en el archivo
            }

        } catch (IOException e) {
            System.out.print("Error creando archivo");
            e.printStackTrace();

        } finally {
            try {
                if (fichero != null) {
                    fichero.close();
                }
            } catch (IOException e1) {
                System.out.print("Error cerrando archivo");
            }
        }
        DefaultListModel listModel = (DefaultListModel) txtFile.getModel();
        listModel.removeAllElements();

} else {
    JOptionPane.showMessageDialog(null,"Debe seleccionar el registro a eliminar!");
}
        
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void txtFileMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtFileMouseClicked
        String selectedValue = txtFile.getSelectedValue();
        Map<String, String> registroMap = getMap(selectedValue);
        txtNombre.setText(registroMap.get("Nombre"));
        txtApellido.setText(registroMap.get("Apellido"));
        txtCorreo.setText(registroMap.get("Correo"));
    }//GEN-LAST:event_txtFileMouseClicked

    private Map getMap(String selectedValue) {

        Map<String, String> registroMap = null;
        for (int i = 0; i < arrayListRegistro.size(); i++) {
            arrayListRegistro.get(i).containsValue(selectedValue);
            if (arrayListRegistro.get(i).containsValue(selectedValue)) {
                registroMap = arrayListRegistro.get(i);
            }
        }

        return registroMap;
    }
    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed
        limpiar();

    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnConsultaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConsultaActionPerformed
        mostrar();
    }//GEN-LAST:event_btnConsultaActionPerformed
    private void limpiar() {
        txtFile.clearSelection();
        txtNombre.setText("");
        txtApellido.setText("");
        txtCorreo.setText("");

    }

    public void mostrar() {
        arrayListRegistro = new ArrayList<Map>();
        File archivo = null;  //apuntar al archivo almancenado DD
        FileReader contenido = null;  //acceder a todo el contenido del archivo
        BufferedReader linea = null; //accede linea a linea al contenido
        DefaultListModel modelo = new DefaultListModel();

        try {
            archivo = new File("d:/ejemplo.txt");
            if (archivo.exists()) {
                contenido = new FileReader(archivo);
                linea = new BufferedReader(contenido);

                String cadena; //variable captura los datos del archivo 

                while ((cadena = linea.readLine()) != null) { //recorre todo el archivo
                    //a += cadena;
                    String[] cadenaSplit = cadena.split(";");
                    Map<String, String> registroMap = new HashMap<String, String>();
                    for (int i = 0; i < 2; i++) {
                        registroMap.put("Nombre", cadenaSplit[0]);
                        registroMap.put("Apellido", cadenaSplit[1]);
                        registroMap.put("Correo", cadenaSplit[2]);
                    }
                    arrayListRegistro.add(registroMap);
                }

                for (int i = 0; i < arrayListRegistro.size(); i++) {
                    modelo.addElement(arrayListRegistro.get(i).get("Nombre"));
                }

                txtFile.setModel(modelo);

                //String temp[] = a.split(";");
                //String tempCadena = "";
                //for (int i = 0; i < temp.length; i++) {
                //    tempCadena += temp[i] + "\n";
                // }
                //txtFile.setText(tempCadena);
            }
        } catch (IOException e) {
            System.out.print("Error en la lectura del archivo");
        } finally {
            try {
                if (contenido != null) {
                    contenido.close();
                }
            } catch (IOException e1) {
                System.out.print("Error cerrando archivo");
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(jFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(jFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(jFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(jFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new jFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConsulta;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnModificar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtCorreo;
    private javax.swing.JList<String> txtFile;
    private javax.swing.JTextField txtNombre;
    // End of variables declaration//GEN-END:variables
}
